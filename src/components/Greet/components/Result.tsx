import { useCallback, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { hanldePassword } from "../functions/handlePassword";
import { ErrorState, setError } from "../../../features/errorSlice";
import { useNavigate } from "react-router-dom";

export const Result: React.FC = () => {
  const [resultMessage, setResultMessage] = useState<string | null>(null);
  const [visiblePassword, setVisiblePassword] = useState<boolean>(false);
  const [password, setPassword] = useState<string>("");
  const [hasSucces, setHasSucces] = useState<boolean>(false);
  const formInfo = useSelector((state) => state.formData);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const error = useSelector(state => state.error);

  const handleSubmit = () => {
    if (!visiblePassword) {
      setVisiblePassword(true);
    } else {
      console.log('handle submit');
      hanldePassword(password, handleError, setHasSucces, hasSucces, navigate);
    }
  } 

  const handleError = (err: ErrorState) => {
    dispatch(setError(err));
  }

  const buildGreeting = useCallback(() => {
    let result = "";

    result += "–í—ñ—Ç–∞—î–º–æ! –î–æ—Ä–æ–≥–∏–π " + formInfo.name + ", ";
    result += "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç, –∞–¥–∂–µ —Ç—ñ–ª—å–∫–∏ —É –≤–∞—Å ";
    result += "—î –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å—Å–∞ " + formInfo.email;
    result += " –¢—ñ–ª—å–∫–∏ —Ç–∞–∫—ñ –º–æ–≥—É—Ç–Ω—ñ –ª—é–¥–∏ —è–∫ –≤–∏, –≥—Ä–∞—é—Ç—å –≤ " + formInfo.game;
    result += ` –Ü –∑–≤–∏—á–∞–π–Ω–æ —Ç—ñ–ª—å–∫–∏ ${formInfo.nation} - ${formInfo.sex}, –∑ —Å—Ç–≤–æ–ª–æ–º ${formInfo.size} –º–æ–∂–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Å–æ–±—ñ –ø–∏—Ç–∏ ${formInfo.drink}!`;
    result +=
      " –ó–∞ –≤—Å—ñ–º–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –Ω–∞—à–æ–≥–æ —Å–∞–π—Ç—É —Ç–∞ —Å–≤—ñ—Ç–æ–≤–æ–≥–æ —Å—É—Å–ø—ñ–ª—å—Å—Ç–≤–∞, –≤–∏ - –Ω–∞–π–∫—Ä–∞—â–∏–π –µ–∫–∑–∞–º–ø–ª—è—Ä –ª—é–¥—Å—Ç–≤–∞!";
    result += ` –ß–æ–º—É? –ó–≤–∏—á–∞–π–Ω–æ, —Ç–æ–º—É —â–æ –≤–∏ –∑–Ω–∞—î—Ç–µ, —â–æ ${formInfo.lang} - –Ω–∞–π–∫—Ä–∞—â–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è`;
    result += " –ù—É —ñ –∑–≤–∏—á–∞–π–Ω–æ, –æ—á–µ–≤–∏–¥–Ω–æ, —â–æ –≤–∏ –Ω–µ –Ω–∞—Ç—É—Ä–∞–ªüòò";
    result +=
      " –¢–∞–∫—ñ –ª—é–¥–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞–º —è–∫ –Ω–∞–π–±—ñ–ª—å—à–µ! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å —É –Ω–∞—Å!üòâ";

    return result;
  }, [formInfo]);

  useEffect(() => {
    if (!resultMessage) {
      setResultMessage(buildGreeting());
    }
  }, [resultMessage, buildGreeting]);

  return (
    <div className="result">
      {resultMessage && <p>{resultMessage}</p>}
      <form className="password" onSubmit={e => {
        e.preventDefault();
        handleSubmit()
      }}>
        {visiblePassword && (
          <>
            <h3 className="password__title"> –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É</h3>
            <input
              placeholder="–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å"
              className="password__input"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </>
        )}
        <button
          className="password__button button is-primary is-small"
          type="submit"
        >
          –£–≤—ñ–π—Ç–∏
        </button>
      </form>
    </div>
  );
};
